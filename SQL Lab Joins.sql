USE sakila;

-- number one 
-- List the number of films per category.

SELECT 
    c.name AS category_name,
    COUNT(fc.film_id) AS number_of_films
FROM 
    film_category fc
JOIN 
    category c ON fc.category_id = c.category_id
GROUP BY 
    c.name
ORDER BY 
    number_of_films DESC;
    
-- number two
-- Retrieve the store ID, city, and country for each store

SELECT s.store_id, ci.city, co.country
FROM store s
JOIN address a ON s.address_id = a.address_id
JOIN city ci ON a.city_id = ci.city_id
JOIN country co ON ci.country_id = co.country_id;

-- number three
-- Calculate the total revenue generated by each store in dollars

SELECT s.store_id, SUM(p.amount) AS total_revenue
FROM payment p
JOIN rental r ON p.rental_id = r.rental_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN store s ON i.store_id = s.store_id
GROUP BY s.store_id;

-- number four
-- Determine the average running time of films for each category

SELECT c.name AS category_name, ROUND(AVG(f.length), 2) AS average_running_time
FROM film_category fc
JOIN category c ON fc.category_id = c.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.name
ORDER BY average_running_time DESC;

-- BONUS
-- number one -- Identify the film categories with the longest average running time

SELECT c.name AS category_name, ROUND(AVG(f.length), 2) AS average_running_time
FROM film_category fc
JOIN category c ON fc.category_id = c.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.name
ORDER BY average_running_time DESC
LIMIT 1;

-- BONUS
-- number two -- Display the top 10 most frequently rented movies in descending order
SELECT f.title, COUNT(r.rental_id) AS rental_count
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
GROUP BY f.title
ORDER BY rental_count DESC
LIMIT 10;

-- BONUS
-- number three -- Determine if "Academy Dinosaur" can be rented from Store 1

SELECT 
    f.title,
    CASE
        WHEN COUNT(i.inventory_id) > 0 THEN 'Available'
        ELSE 'Not Available'
    END AS availability_status
FROM 
    film f
JOIN 
    inventory i ON f.film_id = i.film_id
JOIN 
    store s ON i.store_id = s.store_id
WHERE 
    f.title = 'Academy Dinosaur' AND s.store_id = 1
GROUP BY 
    f.title;

-- BONUS 
-- Number four -- Provide a list of all distinct film titles, along with their availability status in the inventory

SELECT 
    f.title,
    CASE
        WHEN COUNT(i.inventory_id) > 0 THEN 'Available'
        ELSE 'NOT available'
    END AS availability_status
FROM 
    film f
LEFT JOIN 
    inventory i ON f.film_id = i.film_id
GROUP BY 
    f.title;



